[tool.poetry]
name = "pcax"
version = "0.6.1"
packages = [{ include = "pcax" }]
description = "A library for efficient Predictive Coding networks."
authors = ["Luca Pinchetti <luca.pinchetti@cs.ox.ac.uk>"]
repository = "https://github.com/liukidar/pcax"
documentation = "https://pcx.readthedocs.io/en/latest/"
license = "Proprietary. Confidential. No part of this work can be disclosed or shared without the explicit consent of the authors."
# platforms = ["unix", "linux", "osx", "win32"]
readme = "README.md"
keywords = ["predictive coding", "machine learning", "neuroscience"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[[tool.poetry.source]]
name = "torch-gpu"
url = "https://download.pytorch.org/whl/cu121"
priority = "explicit"

[[tool.poetry.source]]
name = "torch-cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
python = "^3.10"
jax = { extras = ["cuda12"], version = "^0.4.28" }
optax = "0.*"
equinox = "0.*"

[tool.poetry.group.examples.dependencies]
numpy = "1.*"
torch = { version = "2.*", source = "torch-cpu" }
torchvision = { version = "0.*", source = "torch-cpu" }
optuna = "3.*"
tqdm = "4.*"
scikit-learn = "1.*"
matplotlib = "3.*"
seaborn = "0.*"
jupyter = "1.*"
gdown = "^5.2.0"
tinyimagenet = "^0.9.9"
omegaconf = "^2.3.0"

[tool.poetry.group.dev.dependencies]
ruff = "0.*"
mypy = "1.*"
pytest = "8.*"
pytest-cov = "5.*"
sphinx = "7.*"
nbsphinx = "0.9.*"
sphinx-book-theme = "1.1.*"
flax = "^0.8.3"

[tool.pytest.ini_options]
addopts = "--cov=pcax"
testpaths = ["tests"]

[tool.mypy]
mypy_path = "pcax"
check_untyped_defs = true
disallow_any_generics = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
no_implicit_reexport = true

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120
indent-width = 4

target-version = "py311"

[tool.ruff.lint]
ignore = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
